name: backendCd.yml

on:
  push:
    branches:
      - "main"

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx
        id: bx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Show buildx builders
        run: docker buildx ls

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Build (Maven)
        run: mvn -B -DskipTests package

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive image/cache names (lowercase)
        id: repo
        run: |
          REPO="${GITHUB_REPOSITORY}"
          IMG="${{ env.REGISTRY }}/${REPO,,}"
          echo "image=$IMG" >> "$GITHUB_OUTPUT"
          echo "cache=$IMG:buildcache" >> "$GITHUB_OUTPUT"

      - name: Get short SHA
        id: meta
        run: echo "sha_tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.bx.outputs.name }}
          context: .
          push: true
          tags: |
            ${{ steps.repo.outputs.image }}:latest
            ${{ steps.repo.outputs.image }}:${{ steps.meta.outputs.sha_tag }}
          cache-from: type=registry,ref=${{ steps.repo.outputs.cache }}
          cache-to: type=registry,ref=${{ steps.repo.outputs.cache }},mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Locate compose file
        id: compose
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATES=(
            "docker-compose.yml"
            "docker-compose.yaml"
            "compose.yml"
            "compose.yaml"
            "deploy/docker-compose.yml"
            "deploy/compose.yml"
            "infra/docker-compose.yml"
            "infra/compose.yml"
          )
          FILE=""
          for f in "${CANDIDATES[@]}"; do
            if [[ -f "$f" ]]; then FILE="$f"; break; fi
          done
          if [[ -z "$FILE" ]]; then
            echo "Keine Compose-Datei gefunden. Lege sie ins Repo oder passe den Pfad an." >&2
            echo "Workspace-Inhalt:"
            ls -la
            exit 1
          fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Show located compose path
        run: |
          echo "Using compose file: ${{ steps.compose.outputs.file }}"
          ls -la "$(dirname "${{ steps.compose.outputs.file }}")"

      - name: Ensure target dir exists
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            mkdir -p "${{ secrets.APP_DIR }}"

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "${{ steps.compose.outputs.file }}"
          target: "${{ secrets.APP_DIR }}/"
          overwrite: true
          debug: true

      - name: Copy .env if present
        if: ${{ hashFiles('.env') != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: ".env"
          target: "${{ secrets.APP_DIR }}/"
          overwrite: true
          debug: true

      - name: Copy docker-compose.prod.yml if present
        if: ${{ hashFiles('docker-compose.prod.yml') != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.prod.yml"
          target: "${{ secrets.APP_DIR }}/"
          overwrite: true
          debug: true

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: GITHUB_TOKEN,GITHUB_ACTOR
          script: |
            set -euo pipefail
            cd "${{ secrets.APP_DIR }}"

            # GHCR-Login (wird ignoriert, falls privat + Token nicht reicht)
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin || true

            if [ -f docker-compose.prod.yml ]; then
              export COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml
            else
              # falls der Dateiname nicht docker-compose.yml hei√üt, COMPOSE_FILE setzen:
              if [ -f compose.yml ]; then
                export COMPOSE_FILE=compose.yml
              elif [ -f compose.yaml ]; then
                export COMPOSE_FILE=compose.yaml
              else
                export COMPOSE_FILE=docker-compose.yml
              fi
            fi

            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f